using System;
using System.Collections;
using UnityEngine;
using Random = UnityEngine.Random;

public class MalwareSpawner : MonoBehaviour
{
    ObjectPooling objectPool;
    GameManager gameManager;
    [SerializeField] GameObject bluePivot;
    [SerializeField] GameObject greenPivot;
    float songRPM;
    float newRPM = 0.25f;
    int difficultyNum;
    int emptyCounter = 0;
    float drumPlayStartTime = 35f;
    float drumPlayTime = 1.5f;
    bool isDrumPlayed;
    float songEndTime = 68f;
    [SerializeField] int[] songTimes;

    public event Action isDrumStarted;
    public event Action isDrumFinished;
    
    public float currentTime = 0f;
    void Start()
    {
        FindScriptsOnScene();
        StartCoroutine(nameof(SpawnMalwares));
        FindSongRPM();
        DefineDifficultyNum();

        if (difficultyNum == 2)
        {
            StartCoroutine(nameof(HardModeDrumsPlay));
            StartCoroutine(nameof(HardModeRhythmHandler));
        }
    }
    
    void Update()
    {
        currentTime = Time.timeSinceLevelLoad;
    }
    //TODO: publish songrpm here
    void FindSongRPM() => songRPM = gameManager.songRPM;
    //TODO: publish difficultyLevel here

    void DefineDifficultyNum() => difficultyNum = gameManager.difficultyLevel;

    void FindScriptsOnScene()
    {
        objectPool = FindObjectOfType<ObjectPooling>();
        gameManager = FindObjectOfType<GameManager>();
    }

    IEnumerator HardModeRhythmHandler()
    {
        for (int i = 0; i < songTimes.Length; i++)
        {
            var indexTime = songTimes[i];
            yield return new WaitUntil(() => IsDrumPlayConditionSecMet(indexTime));
            var currentRPM = songRPM;
            songRPM /= 1.5f;
            StartCoroutine(nameof(BackToNormalRPM), currentRPM);
        }
    }

    bool IsDrumPlayConditionSecMet(int time) => Time.timeSinceLevelLoad > time;


    IEnumerator HardModeDrumsPlay()
    {
        yield return new WaitUntil(IsDrumPlayConditionMet);

        isDrumPlayed = true;
        var currentRPM = songRPM;
        songRPM = newRPM;
        
        isDrumStarted?.Invoke();
        StartCoroutine(nameof(BackToNormalRPM), currentRPM);
    }
    
    IEnumerator BackToNormalRPM(float rpm)
    {
        yield return new WaitForSeconds(drumPlayTime);
        
        isDrumFinished?.Invoke();
        songRPM = rpm;
        isDrumPlayed = false;
    }

    bool IsDrumPlayConditionMet() => Time.timeSinceLevelLoad > drumPlayStartTime;

    IEnumerator SpawnMalwares()
    {
        if (currentTime < songEndTime)
        {
            yield return new WaitForSeconds(songRPM);
            
            int blueorGreenNum = Random.Range(0, 2);
            
            int possibility = Random.Range(1, difficultyNum); //Spawn if possiblity = 1
            
            if (difficultyNum == 3)
            {
                if (possibility != 1)
                {
                    if (emptyCounter > 2)
                    {
                        if (blueorGreenNum == 0) //0 = BlueSpawn
                        {
                            SpawnFromPool("BlueMalware", bluePivot.transform.position);
                        }
                        else
                        {
                            SpawnFromPool("GreenMalware", greenPivot.transform.position);
                        }

                        emptyCounter = 0;
                    }
                    else
                    {
                        emptyCounter++;
                    }
                }
            }

            if (possibility == 1)
            {
                if (!isDrumPlayed)
                {
                    int malwareorTrojan = Random.Range(0, 31);

                    if (malwareorTrojan == 14)
                    {
                        if (blueorGreenNum == 0)
                        {
                            Vector3 posTrojan = new Vector3(bluePivot.transform.position.x + 0.13f,
                                bluePivot.transform.position.y - 0.34f, bluePivot.transform.position.z);

                            SpawnFromPool("Trojan", posTrojan);
                        }
                        else
                        {
                            Vector3 posTrojan = new Vector3(greenPivot.transform.position.x - 0.13f,
                                greenPivot.transform.position.y - 0.34f, greenPivot.transform.position.z);

                            SpawnFromPool("Trojan", posTrojan);
                        }
                    }
                    else
                    {
                        if (blueorGreenNum == 0) //0 = BlueSpawn
                        {
                            SpawnFromPool("BlueMalware", bluePivot.transform.position);
                        }
                        else
                        {
                            SpawnFromPool("GreenMalware", greenPivot.transform.position);
                        }
                    }
                }
                else
                {
                    SpawnFromPool("BlueMalware", bluePivot.transform.position);
                    SpawnFromPool("GreenMalware", greenPivot.transform.position);
                }
            }

            StartCoroutine(nameof(SpawnMalwares));
        }
    }

    void SpawnFromPool(string tag, Vector3 position) => objectPool.SpawnFromPool(tag, position);
}
